package files

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x3d\x6f\xdb\x40\x0c\xdd\xf5\x2b\x08\xb6\xa3\x11\xb9\x41\xd1\xc1\x5b\xc7\x0e\x5d\xba\x16\x81\x71\x96\x68\xf9\xd2\xe8\x8e\x21\xa9\xa4\x41\xa1\xff\x5e\xdc\x59\xb1\x3e\xea\xa0\x89\x5b\x4d\xa7\xe3\x7b\x14\xdf\xe3\x83\x7e\x15\x00\xa8\x8f\xae\x69\x48\x70\x03\x78\x7d\xb5\xc6\x55\xba\xf3\x61\x1f\x71\x03\xa9\x0e\x80\xe6\xed\x8e\x52\x9d\x77\xa5\x63\xbe\x62\x89\x16\x33\x10\x00\x1f\x48\xd4\xc7\x90\xca\xc3\x11\x42\x34\x50\x32\x2c\x00\xfa\xdc\x4e\xab\x03\xb5\xa4\xb8\x81\xef\x47\xd2\xc1\x8c\x9f\x1b\xa4\xb3\x26\xec\x4d\xc6\x56\x31\x68\x37\x03\x3b\xe6\x3b\x5f\x39\xf3\x31\x94\xb7\x1a\xc3\x88\x65\x89\x75\x57\xbd\x12\xeb\xec\xa0\xa3\xa6\xf2\xe1\x43\xe9\x3a\x3b\x9c\x6e\x12\x24\xaa\x4d\xde\x01\x30\x32\x49\x6e\xf6\xa5\x4e\x02\x3f\x27\xc2\x6a\x2c\x0b\x29\xc7\xa0\xa4\x33\x16\x00\x5e\xaf\xd7\x8b\x2b\x00\xac\x49\x2b\xf1\x6c\x83\x5b\x93\x46\xb9\x9c\x4d\x72\x7f\xd0\x00\xf0\xbd\xd0\x3e\x31\xde\x95\x35\xed\x7d\xf0\xa9\x83\x96\xbc\x4b\xe3\x7c\x1b\x46\xf8\x4a\xaa\xae\x21\x9c\x71\xfb\xe2\xdc\xb9\x9f\x28\x60\x27\xae\x25\x23\x19\x3d\x3c\x3e\x8b\xd9\x83\x6b\x73\x02\x76\xb1\x7e\x5a\x0e\xee\xc3\x4b\x15\xa1\xfb\xce\x0b\x25\xef\x4c\x3a\xfa\x4f\x82\xef\x3b\x52\x7b\x83\xde\x9b\x89\x5e\x73\xcd\x52\xe9\x71\xab\x23\xba\x98\xf2\xfb\x53\x86\x27\x93\x8c\x29\x3a\x3b\xd2\x24\x51\xf6\xc4\xd9\xb6\xb8\xbb\xa5\xca\x4e\xf6\xa4\xe0\x32\x89\xf9\x45\x72\xb0\x11\x17\x6c\x3b\xb0\x66\x89\x7a\xee\xa4\x26\x3e\x34\x78\x76\x99\x9d\x92\x0c\x8b\x7a\x33\x97\x9d\xea\x63\x94\xfa\xd5\xdc\xb9\x4d\xab\xb9\x1f\xf3\x4c\xfe\x83\x21\xae\xaa\x48\x75\x6b\xf1\x07\x85\x4b\x64\x65\xe2\xc5\x86\xd2\x4f\xf6\x42\xba\xf5\x7f\xfb\xf6\x34\xd9\xb8\x8f\xd2\xba\xf4\x23\x41\x1f\xec\xd3\xc7\x17\x3d\x4b\xd1\x2a\xfa\xe2\x77\x00\x00\x00\xff\xff\xaf\x20\x3c\xd4\x85\x05\x00\x00")

func swagger_json() ([]byte, error) {
	return bindata_read(
		_swagger_json,
		"swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"swagger.json": swagger_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"swagger.json": &_bintree_t{swagger_json, map[string]*_bintree_t{}},
}}
